On all nodes 
Step 1: Prepare Nodes
# vi /etc/hosts
 
192.168.56.131      master1.maas  master1
192.168.56.132      worker1.maas  worker1
192.168.56.133      worker2.maas  worker2     
 
Step 2: Disable swap
# swapoff -a
# sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab
 
Step 3: Set up Forwarding IPv4 and letting iptables see bridged traffic
# cat << EOF | sudo tee /etc/modules-load.d/k8s.conf
  overlay
  br_netfilter
  EOF
 
# sudo modprobe overlay
# sudo modprobe br_netfilter
 
# sysctl params required by setup, params persist across reboot
 
# tee /etc/sysctl.d/k8s.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
 
>> Apply sysctl params without reboot
 
# sudo sysctl --system
 
Step 4: Update system and install basic utilities for further installation
# sudo apt-get update
# sudo apt-get install -y apt-transport-https ca-certificates curl
 
Step 5: Download the Google Cloud public signing key
# sudo mkdir /etc/apt/keyrings
# curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
 
Step 6: Add the Kubernetes apt repository
# echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
**************************************************************************************************************************************************************************
 
Step 7) Install kubelet, kubeadm and kubectl
Step 7a) : Update apt package index, install kubelet, kubeadm, kubectl and docker.io, and pin their version
********************************************************************************************************
* # sudo apt-get update                                                                                *  
* ### sudo apt-get install -y kubelet=1.28.1-1.1 kubeadm=1.28.1-1.1 kubectl=1.28.1-1.1 docker.io ###   * 
* # sudo apt-get install -y kubelet=1.21.10-00 kubeadm=1.21.10-00 kubectl=1.21.10-00 docker.io         *
* # sudo apt-mark hold kubelet kubeadm kubectl docker.io                                               *
********************************************************************************************************
 
echo "Step 1 Install kubelet, kubeadm and kubectl"
sudo apt -y install curl apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
 
## we are going to install k8s 1.21.10 ,not compatible with 1.22+
 
sudo apt update
sudo apt -y install vim git curl wget kubelet=1.21.10-00 kubectl=1.21.10-00 kubeadm=1.21.10-00
sudo apt-mark hold kubelet kubeadm kubectl
 
 
Step 7b) Start and enable Kubelet:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
systemctl daemon-reload
systemctl enable kubelet
systemctl restart kubelet
systemctl status kubelet
 
Step 8: Installing Docker:
 
Step 8a)# Add repo and Install docker packages
echo "Installing docker"
sudo apt update
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install -y containerd.io docker-ce docker-ce-cli
 
# Create required directories
 
Step 8b)# Setting up the Docker "daemon" and Creating daemon json config file
echo "Create daemon json config file"
sudo tee /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
 
mkdir -p /etc/systemd/system/docker.service.d
 
Step 8c) Start and enable docker:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
systemctl daemon-reload
systemctl enable docker
systemctl restart docker
systemctl status docker
*********************************************************************************************************************************************
Step 9: Set the cgroup driver for runc to systemd required for the kubelet
# sudo mkdir /etc/containerd
# sudo containerd config default > /etc/containerd/config.toml
# sudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml
# sudo systemctl restart containerd
# sudo systemctl restart kubelet
**********************************************************************************************************************************************
Step 10: Initialize k8s cluster with user defined network (Network must be /16, and must NOT match underlying LAN CIDR) (Run on master node)
## kubeadm config images pull
# kubeadm init --pod-network-cidr=192.168.0.0/16
************************************************************************************************************************************************
Step 11: Setup kubectl for user on master node
# mkdir -p $HOME/.kube
# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# sudo chown $(id -u):$(id -g) $HOME/.kube/config
***************************************************************************************************************************************************
Step 12: Setup Calico SDN (Run on master node)
>> if pod network in "kubeadm init" is not =192.168.0.0/16, then edit downloaded custom-resources.yaml file accordingly (edit cidr= entry, default is 192.168.0.0/16)
# kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
  curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O
  kubectl create -f custom-resources.yaml
***********************************************************************************************************************************************************************
Step 13: Join worker node(s)
# kubeadm join 10.0.0.2:6443 --token ndi3ae.ujwfcuais8zm2cyn --discovery-token-ca-cert-hash sha256:fc6c1094159833bf95a3fcb7d49960026e4ddad56f8648b94240cd1c867b2f6b